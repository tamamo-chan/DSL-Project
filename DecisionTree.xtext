grammar sdu.mmmi.tamamo.DecisionTree with org.eclipse.xtext.common.Terminals

generate decisionTree "http://www.mmmi.sdu/tamamo/DecisionTree"

Start:
	"Decisions:" decision=Decision
	
	"Input:" input=Input
	
	"Parameters:" 
	parameter=Parameter
	
	"Rules:" 
	rules=Rules
	
	"Conclusion:" 
	conclusion=Conclusion
;

// Decisions: accept, reject, maybe(recommend_accept, recommend_reject, unsure)

Decision:
	text+=ID ("," next=Decision)? | text+=ID "(" nested=Decision ")" ("," next=Decision)?
;

// Input: int credit, bool loans, bool loyal_customer, bool CE

Input:
	value=InputType ("," next=Input)? 
;

InputType:
	InputInt | InputString | InputBool
;

InputInt:
	"int" name=ID
;

InputString:
	"string" name=ID 
;

InputBool:
	"bool" name=ID 
;

/*Parameters:
good = 0
bad = 0
*/

Parameter:
	name=ID "=" value=INT 
	(next=Parameter)?
;

/*Rules:
credit > 1000? good 50
previous loans? reject
loyal customer? good 5
CEO? accept
*/

Rules:
	left=RuleType (operator=Operator right=RuleType)? "?" affected_parameter=ID (points=INT)? 
	(next=Rules)?
;

Operator:
	{GreaterThan} type='>' | {LessThan} type='<' | {GreaterEqual} type='>=' | {LessEqual} type='<='	
;

RuleType:
	{RuleTypeInt} value=INT | {RuleTypeID} name=ID
;

Conclusion:
	left=RuleType operator=Operator right=RuleType ":" decision=ID 
	(next=Conclusion)? | 
	
	ConclusionNested
	(next=Conclusion)? |
	
	ConclusionElse
;

ConclusionElse:
	"else:" left=RuleType
;

ConclusionNested:
	parent=ID "(" nested=Conclusion ")"
;




/*grammar: 

Decisions: accept, reject, maybe(recommend_accept, recommend_reject, unsure)

Input: int credit, bool loans, bool loyal_customer, bool CE

Parameters:
good = 0
bad = 0


Rules:
credit > 1000? good 50
previous loans? reject
loyal customer? good 5
CEO? accept
*/
