/*
 * generated by Xtext 2.24.0
 */
package sdu.mmmi.tamamo.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import sdu.mmmi.tamamo.decisionTree.Input
import sdu.mmmi.tamamo.decisionTree.Decision
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.emf.ecore.EObject
import sdu.mmmi.tamamo.decisionTree.InputInt
import sdu.mmmi.tamamo.decisionTree.InputString
import sdu.mmmi.tamamo.decisionTree.Parameter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DecisionTreeGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val Decision decModel = resource.allContents.filter(Decision).next
		val Input inputModel = resource.allContents.filter(Input).next
		val Parameter parameterModel = resource.allContents.filter(Parameter).next;
		System::out.println("Anything")
		inputModel.display
		decModel.display
		parameterModel.display
		inputModel.generateInputFile(fsa)
		decModel.generateDecisionFile(fsa)
		parameterModel.generateParameterFile(fsa)
		
	}
	
	def void generateParameterFile(Parameter param, IFileSystemAccess2 fsa) {
		fsa.generateFile("Parameter.java", generateParameter(param))
	}
	
	def CharSequence generateParameter(Parameter parameter) {'''
public class Parameter {
	«generateClassVariables(parameter)»
	
	public Parameter(«generateConstructor(parameter)») {
		«generateAssignment(parameter)»
	}
}'''}

	def CharSequence generateAssignment(Parameter param) {'''
this.«param.name» = «param.name»;
«IF param.next !== null»«generateAssignment(param.next)»«ENDIF»'''}

	def CharSequence generateConstructor(Parameter param) {'''
int «param.name»«IF param.next !== null», «generateConstructor(param.next)»«ENDIF»'''} 

	def CharSequence generateClassVariables(Parameter param) {'''
private int «param.name» = «param.value»;

public int get«param.name.toFirstUpper»() {
	return this.«param.name»;
}

public void set«param.name.toFirstUpper»(int value) {
	this.«param.name» = value;
}

«IF param.next !== null»«generateClassVariables(param.next)»«ENDIF»'''}
	
	

	def CharSequence generateConstructor(Input input) {'''
«IF input.value instanceof InputInt»int«ELSEIF input.value instanceof InputString»String«ELSE»boolean«ENDIF»''' +
''' «input.value.name»«IF input.next !== null», «generateConstructor(input.next)»«ENDIF»'''} 
	
	
	
	
	def void generateInputFile(Input input,IFileSystemAccess2 fsa){
		fsa.generateFile("Input.java",generateInput(input))
	}
	
	def generateInput(Input input) {
		'''public class Input {
			public « IF input.value==InputInt»int 
				«ELSEIF input.value==InputString»String
				«ELSE»Boolean
				«ENDIF» name;
				
				«IF input.next!==null» «ELSE»Public Input next; «ENDIF»
				
			}
		}'''
	}
	
	def void generateDecisionFile(Decision decision, IFileSystemAccess2 fsa){
		fsa.generateFile("Decision.java",generateDecision(decision))
	}
	
	def  generateDecision(Decision decision){
		'''
		import java.util.list;
		import java.util.ArrayList;
		public class _Decision {
			public String _text;
			«IF decision.nested!==null» «ELSE»public List<Decision> _nested; «ENDIF»
			public Decision _next;
			public String getText() {
			        return _text;
			    }
			
			«IF decision.nested!==null» «ELSE»public List<Decision> getNested() {
			        return _nested;
			    }
			«ENDIF»
			    public Decision getNext() {
			        return _next;
			    } 
		  public void setNext(Decision decision) {
		        _next = decision;
		    }
		
		    public void setNested(Decision decision) {
		        if (_nested != null) {
		            _nested.add(decision);
		        } else {
		            _nested = new ArrayList<Decision>();
		        }
		    }
		
		    public void setText(String value) {
		        _text = value;
		    }
		
		}
		'''
	}
	
	
	def void display(EObject obj){
		val res = new XMLResourceImpl
		res.contents.add(EcoreUtil::copy(obj))
		System::out.println("Dump of model:")
		res.save(System.out,null)
	}
	
}
