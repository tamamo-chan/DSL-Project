/*
 * generated by Xtext 2.24.0
 */
package sdu.mmmi.tamamo.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import sdu.mmmi.tamamo.decisionTree.Input
import sdu.mmmi.tamamo.decisionTree.Decision
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.emf.ecore.EObject
import sdu.mmmi.tamamo.decisionTree.InputInt
import sdu.mmmi.tamamo.decisionTree.InputString
import sdu.mmmi.tamamo.decisionTree.Parameter
import sdu.mmmi.tamamo.decisionTree.Rules
import sdu.mmmi.tamamo.decisionTree.RuleTypeInt
import sdu.mmmi.tamamo.decisionTree.GreaterThan
import sdu.mmmi.tamamo.decisionTree.LessThan
import sdu.mmmi.tamamo.decisionTree.GreaterEqual
import sdu.mmmi.tamamo.decisionTree.Conclusion
import sdu.mmmi.tamamo.decisionTree.ConclusionNested
import sdu.mmmi.tamamo.decisionTree.RuleTypeID
import sdu.mmmi.tamamo.decisionTree.ConclusionElse
import sdu.mmmi.tamamo.decisionTree.Start

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DecisionTreeGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val Decision decModel = resource.allContents.filter(Decision).next
		val Input inputModel = resource.allContents.filter(Input).next
		val Parameter parameterModel = resource.allContents.filter(Parameter).next;
		val Rules rulesModel = resource.allContents.filter(Rules).next
		val Conclusion conclusionModel = resource.allContents.filter(Conclusion).next
		val Start startModel = resource.allContents.filter(Start).next
		
		System::out.println("Anything")
		inputModel.display
		decModel.display
		parameterModel.display
		rulesModel.display
		conclusionModel.display
		startModel.display
		
		inputModel.generateInputFile(fsa)
		decModel.generateDecisionFile(fsa)
		parameterModel.generateParameterFile(fsa)
		rulesModel.generateRulesFile(fsa)
		conclusionModel.generateConclusionFile(fsa)
		startModel.generateStartFile(fsa)
	}
	
	def void generateStartFile(Start start, IFileSystemAccess2 fsa) {

		fsa.generateFile("Main.java", generateStart(start))
	}

	def generateStart(Start start) {
		'''
			«generatePackage()»
			
			public class Main {
				    private static int good = 0;
				    private static int bad = 0;
				    
				    «generateHandleBool()»
				    
				    «generateMainFunc(start)»
			}  
		'''
	}

	def generatePackage() {
		'''
			package decisiontree;
		'''
	}

	def generateMainFunc(Start start) {
		'''
			public static void main(String[] args){
			
			
			assert(args.length == 4);
			
			        int credit = 0;
			        try {
			            credit = Integer.parseInt(args[0]);
			        }
			        catch (NumberFormatException nfe) {
			            System.out.println("The first argument must be an integer.");
			            System.exit(1);
			        }
			
			        String testr = args[1];
			
			        boolean previous_loans = handleBool(args[2]);
			
			        String testin = args[3];
			
			
			        Input input = new Input(credit, testr, previous_loans, testin);
			
			        Parameter param = new Parameter(good,bad);
					Decision acceptDecision = new Decision("«start.decision.text.findFirst[true]»");
					
			
			        if (input.getCredit() > 1000) {
			            param.setGood(param.getGood() + 55);
			        }
			
			        if (input.getPrevious_loans()) {
			            System.out.println("Reject");
			            return new Decision("Reject");
			        }
			
			
			        if (good > 80) {
			            return decision;
			        } else if (bad > 20) {
			            System.out.println("reject");
			            return new Decision("Reject");
			        }
			
			}
		'''
	}

	def generateHandleBool() {
		'''
			private static boolean handleBool(String s) {
			     if (s.equals("true") || s.equals("1") || s.equals("True") || s.equals("TRUE")) {
			         return true;
			     } else {
			         return false;
			     }
			 }
		'''
	}
	
	def void generateConclusionFile(Conclusion conc, IFileSystemAccess2 fsa) {
		fsa.generateFile("Conclusion.java", generateConclusion(conc))
	}
	
	def CharSequence generateConclusion(Conclusion conclusion) {'''
«generatePackage()»	
import java.util.List;

public class Conclusion {
	
	public Decision begin(Parameter param, List<Decision> list) {
	
		«generateBegin(conclusion)»
	
	}
}


'''}
	
	def CharSequence generateBegin(Conclusion conclusion) {'''
«IF conclusion instanceof ConclusionElse»
for (Decision decision : list) {
	if (decision._text.equals("«(conclusion.getLeft as RuleTypeID).getName»")) {
		return decision;
	}
}

return null;
«ELSEIF conclusion instanceof ConclusionNested»
for (Decision decision : list) {
	if (decision._text.equals("«conclusion.getParent»")) {
		list = decision._nested;
	}
}

«IF conclusion.getNested !== null»«generateBegin(conclusion.getNested)»«ENDIF»«ELSE»
if («generateComparison(conclusion)») {
		for (Decision decision : list) {
			if (decision._text.equals("«conclusion.getDecision»")) {
				return decision;
			}
		}
	}
	
«IF conclusion.getNext !== null»«generateBegin(conclusion.getNext)»«ENDIF»«ENDIF»
'''}




	def CharSequence generateComparison(Conclusion conclusion) {'''
«IF conclusion.getLeft instanceof RuleTypeID»param.get«(conclusion.getLeft as RuleTypeID).getName.toFirstUpper»()«ELSE»«(conclusion.getLeft as RuleTypeInt).getValue»«ENDIF»'''+
''' «conclusion.getOperator.getType» «IF conclusion.getRight instanceof RuleTypeID»param.get«(conclusion.getRight as RuleTypeID).getName.toFirstUpper»() «ELSE»«(conclusion.getRight as RuleTypeInt).getValue»«ENDIF»'''}





	
	def void generateParameterFile(Parameter param, IFileSystemAccess2 fsa) {
		fsa.generateFile("Parameter.java", generateParameter(param))
	}
	
	
	
	
	
	
	def CharSequence generateParameter(Parameter parameter) {'''
«generatePackage()»
public class Parameter {
	«generateClassVariables(parameter)»
	
	public Parameter(«generateConstructor(parameter)») {
		«generateAssignment(parameter)»
	}
}'''}

	def CharSequence generateAssignment(Parameter param) {'''
this.«param.name» = «param.name»;
«IF param.next !== null»«generateAssignment(param.next)»«ENDIF»'''}




	def CharSequence generateConstructor(Parameter param) {'''
int «param.name»«IF param.next !== null», «generateConstructor(param.next)»«ENDIF»'''} 





	def CharSequence generateClassVariables(Parameter param) {'''
private int «param.name» = «param.value»;
public int get«param.name.toFirstUpper»() {
	return this.«param.name»;
}
public void set«param.name.toFirstUpper»(int value) {
	this.«param.name» = value;
}
«IF param.next !== null»«generateClassVariables(param.next)»«ENDIF»'''}




	
	
	
	def void generateInputFile(Input input,IFileSystemAccess2 fsa){
		fsa.generateFile("folder/Input.java",generateInput(input))
	}
	
	def CharSequence generateInput(Input input) {'''
«generatePackage()»
public class Input {
	
	«generateClassVariables(input)»
	
	public Input(«generateConstructor(input)») {
		«generateAssignment(input)»
	}	
}
'''}


	def CharSequence generateConstructor(Input input) {'''
«IF input.value instanceof InputInt»int«ELSEIF input.value instanceof InputString»String«ELSE»boolean«ENDIF»''' +
''' «input.value.name»«IF input.next !== null», «generateConstructor(input.next)»«ENDIF»'''} 
	
	
	
	def CharSequence generateAssignment(Input input) {'''
this.«input.value.name» = «input.value.name»;
«IF input.next !== null»«generateAssignment(input.next)»«ENDIF»'''}
	
	def CharSequence generateClassVariables(Input input) {'''
private « IF input.value instanceof InputInt»int «input.value.name»;
public int get«input.value.name.toFirstUpper»() {
	return this.«input.value.name»;
}
«ELSEIF input.value instanceof InputString»String «input.value.name»;
public String get«input.value.name.toFirstUpper»() {
	return this.«input.value.name»;
}
«ELSE»boolean «input.value.name»;
public boolean get«input.value.name.toFirstUpper»() {
	return this.«input.value.name»;
}
«ENDIF»
«IF input.next!==null»«generateClassVariables(input.next)»«ENDIF»'''}
	
	
	
	def void generateDecisionFile(Decision decision, IFileSystemAccess2 fsa){
		fsa.generateFile("Decision.java",generateDecision(decision))
	}
	
	def  generateDecision(Decision decision){
		'''
		«generatePackage()»
		
		import java.util.List;
		import java.util.ArrayList;
		public class Decision {
			public String _text;
			«IF decision.nested!==null» «ELSE»public List<Decision> _nested; «ENDIF»
			public Decision _next;
			public Decision(String text){
			        _text = text;
			    }
			public String getText() {
			        return _text;
			    }
			
			«IF decision.nested!==null» «ELSE»public List<Decision> getNested() {
			        return _nested;
			    }
			«ENDIF»
			    public Decision getNext() {
			        return _next;
			    } 
		  public void setNext(Decision decision) {
		        _next = decision;
		    }
		
		    public void setNested(Decision decision) {
		        if (_nested != null) {
		            _nested.add(decision);
		        } else {
		            _nested = new ArrayList<Decision>();
		        }
		    }
		
		    public void setText(String value) {
		        _text = value;
		    }
		
		}
		'''
	}
	
	
		def void generateRulesFile(Rules rules, IFileSystemAccess2 fsa) {
		fsa.generateFile("Rules.java", generateRules(rules))
	}

	def generateRules(Rules rules) {
		'''
			«generatePackage()»
			
			public class Rules {
				«IF rules.left instanceof RuleTypeInt »public int «ELSE»public String «ENDIF» _left;
				
				«IF rules.left instanceof RuleTypeInt »public int «ELSE»public String «ENDIF» getLeft() {
					return _left;
				}
				public String _affected_parameter;
				public String getAffectedParameter(){
					return _affected_parameter;
				}
				
				«IF rules.right!==null» 
				«ELSE»	
					«IF rules.operator instanceof GreaterThan» «generateRuleGraterThan(rules)»
					«ELSEIF rules.operator instanceof LessThan» «generateLessThan(rules)»
					«ELSEIF rules.operator instanceof GreaterEqual»«generateGreaterEqual(rules)»
					«ELSE» «generateLessEqual(rules)»
					«ENDIF»
				«ENDIF»
				«IF rules.points!=0»public int _points;«ENDIF»
				«IF rules.points!=0»public int getPoints() {
									return _points;
				}«ENDIF»
			
			«generateRuleConstructor(rules)»
			}
			
		'''
	}

	def generateRuleConstructor(Rules rules) {
		'''
			public Rules(String left,String affected_parameter, int points){
			     this._left = left;
			     this._points = points;
			     this._affected_parameter = affected_parameter;
			 }
		'''
	}

	def generateLessEqual(Rules rules) {
		'''
			public boolean compare(){
			        return «IF rules.operator!==null»
			        					public boolean compare(){
			        						return «rules.left»>=«rules.right»;
			        						}
			        «ENDIF»
				}
				
				public boolean compare(Input input){
				    	
				    	   return input.value.name;
				}
		'''
	}

	def generateGreaterEqual(Rules rules) {
		'''
			public boolean compare(){
					        return «rules.left»>=«rules.right»;
					    }
					
			public boolean compare(Input input){
					        return input.value.name;
					    }
		'''
	}

	def generateLessThan(Rules rules) {
		'''
			public boolean compare(){
					        return «rules.left»<«rules.right»;
					    }
					
			public boolean compare(Input input){
					        return input.value.name > «rules.right»;
					    }
		'''
	}

	def generateRuleGraterThan(Rules rules) {
		'''
			public boolean compare(){
			        return «rules.left»>«rules.right»;
			    }
			
			    public boolean compare(Input input){
			        return input.value.name;
			    }
		'''
	}
	
	
	def void display(EObject obj){
		val res = new XMLResourceImpl
		res.contents.add(EcoreUtil::copy(obj))
		System::out.println("Dump of model:")
		res.save(System.out,null)
	}

//	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//
//		val test = resource.allContents.
//		
//
//	}
//	
//	
//	def CharSequence generateInput(Input input) {
//		var start = '''
//		
//		public class Input {
//		
//		    private «input.getValue.getType» «input.getValue.getName»;
//		
//		    public type get«input.getValue.getName»() {
//		
//		        return «input.getValue.getName»;
//		
//		    }''';
//		    
//		    start = start + '''test''';
//		    
//		return start;
//	}
	
}
