/**
 * generated by Xtext 2.24.0
 */
package sdu.mmmi.tamamo.decisionTree.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import sdu.mmmi.tamamo.decisionTree.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DecisionTreeFactoryImpl extends EFactoryImpl implements DecisionTreeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DecisionTreeFactory init()
  {
    try
    {
      DecisionTreeFactory theDecisionTreeFactory = (DecisionTreeFactory)EPackage.Registry.INSTANCE.getEFactory(DecisionTreePackage.eNS_URI);
      if (theDecisionTreeFactory != null)
      {
        return theDecisionTreeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DecisionTreeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DecisionTreeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DecisionTreePackage.START: return createStart();
      case DecisionTreePackage.DECISION: return createDecision();
      case DecisionTreePackage.INPUT: return createInput();
      case DecisionTreePackage.INPUT_INT: return createInputInt();
      case DecisionTreePackage.INPUT_STRING: return createInputString();
      case DecisionTreePackage.INPUT_BOOL: return createInputBool();
      case DecisionTreePackage.PARAMETER: return createParameter();
      case DecisionTreePackage.RULES: return createRules();
      case DecisionTreePackage.OPERATOR: return createOperator();
      case DecisionTreePackage.CONCLUSION: return createConclusion();
      case DecisionTreePackage.CONCLUSION_NESTED: return createConclusionNested();
      case DecisionTreePackage.GREATER_THAN: return createGreaterThan();
      case DecisionTreePackage.LESS_THAN: return createLessThan();
      case DecisionTreePackage.GREATER_EQUAL: return createGreaterEqual();
      case DecisionTreePackage.LESS_EQUAL: return createLessEqual();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Start createStart()
  {
    StartImpl start = new StartImpl();
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decision createDecision()
  {
    DecisionImpl decision = new DecisionImpl();
    return decision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputInt createInputInt()
  {
    InputIntImpl inputInt = new InputIntImpl();
    return inputInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputString createInputString()
  {
    InputStringImpl inputString = new InputStringImpl();
    return inputString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputBool createInputBool()
  {
    InputBoolImpl inputBool = new InputBoolImpl();
    return inputBool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rules createRules()
  {
    RulesImpl rules = new RulesImpl();
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operator createOperator()
  {
    OperatorImpl operator = new OperatorImpl();
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conclusion createConclusion()
  {
    ConclusionImpl conclusion = new ConclusionImpl();
    return conclusion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConclusionNested createConclusionNested()
  {
    ConclusionNestedImpl conclusionNested = new ConclusionNestedImpl();
    return conclusionNested;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterThan createGreaterThan()
  {
    GreaterThanImpl greaterThan = new GreaterThanImpl();
    return greaterThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessThan createLessThan()
  {
    LessThanImpl lessThan = new LessThanImpl();
    return lessThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterEqual createGreaterEqual()
  {
    GreaterEqualImpl greaterEqual = new GreaterEqualImpl();
    return greaterEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessEqual createLessEqual()
  {
    LessEqualImpl lessEqual = new LessEqualImpl();
    return lessEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecisionTreePackage getDecisionTreePackage()
  {
    return (DecisionTreePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DecisionTreePackage getPackage()
  {
    return DecisionTreePackage.eINSTANCE;
  }

} //DecisionTreeFactoryImpl
