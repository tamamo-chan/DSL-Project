/*
 * generated by Xtext 2.24.0
 */
package sdu.mmmi.tamamo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DecisionTreeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecisionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDecisionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDecisionDecisionParserRuleCall_1_0 = (RuleCall)cDecisionAssignment_1.eContents().get(0);
		private final Keyword cInputKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputInputParserRuleCall_3_0 = (RuleCall)cInputAssignment_3.eContents().get(0);
		private final Keyword cParametersKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParameterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParameterParameterParserRuleCall_5_0 = (RuleCall)cParameterAssignment_5.eContents().get(0);
		private final Keyword cRulesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRulesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRulesRulesParserRuleCall_7_0 = (RuleCall)cRulesAssignment_7.eContents().get(0);
		private final Keyword cConclusionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cConclusionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cConclusionConclusionParserRuleCall_9_0 = (RuleCall)cConclusionAssignment_9.eContents().get(0);
		
		//Start:
		//	"Decisions:" decision=Decision
		//	"Input:" input=Input
		//	"Parameters:"
		//	parameter=Parameter
		//	"Rules:"
		//	rules=Rules
		//	"Conclusion:"
		//	conclusion=Conclusion;
		@Override public ParserRule getRule() { return rule; }
		
		//"Decisions:" decision=Decision
		//"Input:" input=Input
		//"Parameters:"
		//parameter=Parameter
		//"Rules:"
		//rules=Rules
		//"Conclusion:"
		//conclusion=Conclusion
		public Group getGroup() { return cGroup; }
		
		//"Decisions:"
		public Keyword getDecisionsKeyword_0() { return cDecisionsKeyword_0; }
		
		//decision=Decision
		public Assignment getDecisionAssignment_1() { return cDecisionAssignment_1; }
		
		//Decision
		public RuleCall getDecisionDecisionParserRuleCall_1_0() { return cDecisionDecisionParserRuleCall_1_0; }
		
		//"Input:"
		public Keyword getInputKeyword_2() { return cInputKeyword_2; }
		
		//input=Input
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_3_0() { return cInputInputParserRuleCall_3_0; }
		
		//"Parameters:"
		public Keyword getParametersKeyword_4() { return cParametersKeyword_4; }
		
		//parameter=Parameter
		public Assignment getParameterAssignment_5() { return cParameterAssignment_5; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_5_0() { return cParameterParameterParserRuleCall_5_0; }
		
		//"Rules:"
		public Keyword getRulesKeyword_6() { return cRulesKeyword_6; }
		
		//rules=Rules
		public Assignment getRulesAssignment_7() { return cRulesAssignment_7; }
		
		//Rules
		public RuleCall getRulesRulesParserRuleCall_7_0() { return cRulesRulesParserRuleCall_7_0; }
		
		//"Conclusion:"
		public Keyword getConclusionKeyword_8() { return cConclusionKeyword_8; }
		
		//conclusion=Conclusion
		public Assignment getConclusionAssignment_9() { return cConclusionAssignment_9; }
		
		//Conclusion
		public RuleCall getConclusionConclusionParserRuleCall_9_0() { return cConclusionConclusionParserRuleCall_9_0; }
	}
	public class DecisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.Decision");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTextAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTextIDTerminalRuleCall_0_0_0 = (RuleCall)cTextAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNextAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNextDecisionParserRuleCall_0_1_1_0 = (RuleCall)cNextAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTextAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTextIDTerminalRuleCall_1_0_0 = (RuleCall)cTextAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNestedAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNestedDecisionParserRuleCall_1_2_0 = (RuleCall)cNestedAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cNextAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cNextDecisionParserRuleCall_1_4_1_0 = (RuleCall)cNextAssignment_1_4_1.eContents().get(0);
		
		//// Decisions: accept, reject, maybe(recommend_accept, recommend_reject, unsure)
		//Decision:
		//	text=ID ("," next=Decision)? | text=ID "(" nested=Decision ")" ("," next=Decision)?;
		@Override public ParserRule getRule() { return rule; }
		
		//text=ID ("," next=Decision)? | text=ID "(" nested=Decision ")" ("," next=Decision)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//text=ID ("," next=Decision)?
		public Group getGroup_0() { return cGroup_0; }
		
		//text=ID
		public Assignment getTextAssignment_0_0() { return cTextAssignment_0_0; }
		
		//ID
		public RuleCall getTextIDTerminalRuleCall_0_0_0() { return cTextIDTerminalRuleCall_0_0_0; }
		
		//("," next=Decision)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//next=Decision
		public Assignment getNextAssignment_0_1_1() { return cNextAssignment_0_1_1; }
		
		//Decision
		public RuleCall getNextDecisionParserRuleCall_0_1_1_0() { return cNextDecisionParserRuleCall_0_1_1_0; }
		
		//text=ID "(" nested=Decision ")" ("," next=Decision)?
		public Group getGroup_1() { return cGroup_1; }
		
		//text=ID
		public Assignment getTextAssignment_1_0() { return cTextAssignment_1_0; }
		
		//ID
		public RuleCall getTextIDTerminalRuleCall_1_0_0() { return cTextIDTerminalRuleCall_1_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//nested=Decision
		public Assignment getNestedAssignment_1_2() { return cNestedAssignment_1_2; }
		
		//Decision
		public RuleCall getNestedDecisionParserRuleCall_1_2_0() { return cNestedDecisionParserRuleCall_1_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//("," next=Decision)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//next=Decision
		public Assignment getNextAssignment_1_4_1() { return cNextAssignment_1_4_1; }
		
		//Decision
		public RuleCall getNextDecisionParserRuleCall_1_4_1_0() { return cNextDecisionParserRuleCall_1_4_1_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeInputIntParserRuleCall_0_0_0 = (RuleCall)cTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cTypeInputStringParserRuleCall_0_0_1 = (RuleCall)cTypeAlternatives_0_0.eContents().get(1);
		private final RuleCall cTypeInputBoolParserRuleCall_0_0_2 = (RuleCall)cTypeAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextInputParserRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		
		//// Input: int credit, bool loans, bool loyal_customer, bool CE
		//Input:
		//	type=(InputInt | InputString | InputBool) ("," next=Input)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=(InputInt | InputString | InputBool) ("," next=Input)?
		public Group getGroup() { return cGroup; }
		
		//type=(InputInt | InputString | InputBool)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//(InputInt | InputString | InputBool)
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//InputInt
		public RuleCall getTypeInputIntParserRuleCall_0_0_0() { return cTypeInputIntParserRuleCall_0_0_0; }
		
		//InputString
		public RuleCall getTypeInputStringParserRuleCall_0_0_1() { return cTypeInputStringParserRuleCall_0_0_1; }
		
		//InputBool
		public RuleCall getTypeInputBoolParserRuleCall_0_0_2() { return cTypeInputBoolParserRuleCall_0_0_2; }
		
		//("," next=Input)?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//next=Input
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }
		
		//Input
		public RuleCall getNextInputParserRuleCall_1_1_0() { return cNextInputParserRuleCall_1_1_0; }
	}
	public class InputIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.InputInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//InputInt:
		//	"int" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"int" name=ID
		public Group getGroup() { return cGroup; }
		
		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class InputStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.InputString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//InputString:
		//	"string" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"string" name=ID
		public Group getGroup() { return cGroup; }
		
		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class InputBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.InputBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//InputBool:
		//	"bool" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"bool" name=ID
		public Group getGroup() { return cGroup; }
		
		//"bool"
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cNextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNextParameterParserRuleCall_3_0 = (RuleCall)cNextAssignment_3.eContents().get(0);
		
		///*Parameters:
		// * good = 0
		// * bad = 0
		// */
		//Parameter:
		//	name=ID "=" value=INT
		//	next=Parameter?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" value=INT
		//next=Parameter?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//next=Parameter?
		public Assignment getNextAssignment_3() { return cNextAssignment_3; }
		
		//Parameter
		public RuleCall getNextParameterParserRuleCall_3_0() { return cNextParameterParserRuleCall_3_0; }
	}
	public class RulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.Rules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftRuleTypeParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRuleTypeParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAffected_parameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAffected_parameterIDTerminalRuleCall_3_0 = (RuleCall)cAffected_parameterAssignment_3.eContents().get(0);
		private final Assignment cPointsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPointsINTTerminalRuleCall_4_0 = (RuleCall)cPointsAssignment_4.eContents().get(0);
		private final Assignment cNextAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNextRulesParserRuleCall_5_0 = (RuleCall)cNextAssignment_5.eContents().get(0);
		
		///*Rules:
		// * credit > 1000? good 50
		// * previous loans? reject
		// * loyal customer? good 5
		// * CEO? accept
		// */
		//Rules:
		//	left=RuleType (operator=Operator right=RuleType)? "?" affected_parameter=ID points=INT?
		//	next=Rules?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=RuleType (operator=Operator right=RuleType)? "?" affected_parameter=ID points=INT?
		//next=Rules?
		public Group getGroup() { return cGroup; }
		
		//left=RuleType
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//RuleType
		public RuleCall getLeftRuleTypeParserRuleCall_0_0() { return cLeftRuleTypeParserRuleCall_0_0; }
		
		//(operator=Operator right=RuleType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_0_0() { return cOperatorOperatorParserRuleCall_1_0_0; }
		
		//right=RuleType
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//RuleType
		public RuleCall getRightRuleTypeParserRuleCall_1_1_0() { return cRightRuleTypeParserRuleCall_1_1_0; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_2() { return cQuestionMarkKeyword_2; }
		
		//affected_parameter=ID
		public Assignment getAffected_parameterAssignment_3() { return cAffected_parameterAssignment_3; }
		
		//ID
		public RuleCall getAffected_parameterIDTerminalRuleCall_3_0() { return cAffected_parameterIDTerminalRuleCall_3_0; }
		
		//points=INT?
		public Assignment getPointsAssignment_4() { return cPointsAssignment_4; }
		
		//INT
		public RuleCall getPointsINTTerminalRuleCall_4_0() { return cPointsINTTerminalRuleCall_4_0; }
		
		//next=Rules?
		public Assignment getNextAssignment_5() { return cNextAssignment_5; }
		
		//Rules
		public RuleCall getNextRulesParserRuleCall_5_0() { return cNextRulesParserRuleCall_5_0; }
	}
	public class RuleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.RuleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RuleType:
		//	INT | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGreaterThanAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLessThanAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cGreaterEqualAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLessEqualAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Operator:
		//	{GreaterThan} '>' | {LessThan} '<' | {GreaterEqual} '>=' | {LessEqual} '<=';
		@Override public ParserRule getRule() { return rule; }
		
		//{GreaterThan} '>' | {LessThan} '<' | {GreaterEqual} '>=' | {LessEqual} '<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{GreaterThan} '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//{GreaterThan}
		public Action getGreaterThanAction_0_0() { return cGreaterThanAction_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_1() { return cGreaterThanSignKeyword_0_1; }
		
		//{LessThan} '<'
		public Group getGroup_1() { return cGroup_1; }
		
		//{LessThan}
		public Action getLessThanAction_1_0() { return cLessThanAction_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
		
		//{GreaterEqual} '>='
		public Group getGroup_2() { return cGroup_2; }
		
		//{GreaterEqual}
		public Action getGreaterEqualAction_2_0() { return cGreaterEqualAction_2_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2_1() { return cGreaterThanSignEqualsSignKeyword_2_1; }
		
		//{LessEqual} '<='
		public Group getGroup_3() { return cGroup_3; }
		
		//{LessEqual}
		public Action getLessEqualAction_3_0() { return cLessEqualAction_3_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3_1() { return cLessThanSignEqualsSignKeyword_3_1; }
	}
	public class ConclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.Conclusion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftRuleTypeParserRuleCall_0_0_0 = (RuleCall)cLeftAssignment_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorOperatorParserRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightRuleTypeParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cDecisionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cDecisionDecisionParserRuleCall_0_4_0 = (RuleCall)cDecisionAssignment_0_4.eContents().get(0);
		private final Assignment cNextAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cNextConclusionParserRuleCall_0_5_0 = (RuleCall)cNextAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cConclusionNestedParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextConclusionParserRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLeftIDTerminalRuleCall_2_1_0 = (RuleCall)cLeftAssignment_2_1.eContents().get(0);
		
		//Conclusion:
		//	left=RuleType operator=Operator right=RuleType ":" decision=Decision
		//	next=Conclusion? | ConclusionNested
		//	next=Conclusion? |
		//	"else:" left=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//left=RuleType operator=Operator right=RuleType ":" decision=Decision
		//next=Conclusion? | ConclusionNested
		//next=Conclusion? |
		//"else:" left=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left=RuleType operator=Operator right=RuleType ":" decision=Decision
		//next=Conclusion?
		public Group getGroup_0() { return cGroup_0; }
		
		//left=RuleType
		public Assignment getLeftAssignment_0_0() { return cLeftAssignment_0_0; }
		
		//RuleType
		public RuleCall getLeftRuleTypeParserRuleCall_0_0_0() { return cLeftRuleTypeParserRuleCall_0_0_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_0_1_0() { return cOperatorOperatorParserRuleCall_0_1_0; }
		
		//right=RuleType
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }
		
		//RuleType
		public RuleCall getRightRuleTypeParserRuleCall_0_2_0() { return cRightRuleTypeParserRuleCall_0_2_0; }
		
		//":"
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }
		
		//decision=Decision
		public Assignment getDecisionAssignment_0_4() { return cDecisionAssignment_0_4; }
		
		//Decision
		public RuleCall getDecisionDecisionParserRuleCall_0_4_0() { return cDecisionDecisionParserRuleCall_0_4_0; }
		
		//next=Conclusion?
		public Assignment getNextAssignment_0_5() { return cNextAssignment_0_5; }
		
		//Conclusion
		public RuleCall getNextConclusionParserRuleCall_0_5_0() { return cNextConclusionParserRuleCall_0_5_0; }
		
		//ConclusionNested
		//next=Conclusion?
		public Group getGroup_1() { return cGroup_1; }
		
		//ConclusionNested
		public RuleCall getConclusionNestedParserRuleCall_1_0() { return cConclusionNestedParserRuleCall_1_0; }
		
		//next=Conclusion?
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }
		
		//Conclusion
		public RuleCall getNextConclusionParserRuleCall_1_1_0() { return cNextConclusionParserRuleCall_1_1_0; }
		
		//"else:" left=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//"else:"
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }
		
		//left=ID
		public Assignment getLeftAssignment_2_1() { return cLeftAssignment_2_1; }
		
		//ID
		public RuleCall getLeftIDTerminalRuleCall_2_1_0() { return cLeftIDTerminalRuleCall_2_1_0; }
	}
	public class ConclusionNestedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mmmi.tamamo.DecisionTree.ConclusionNested");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParentIDTerminalRuleCall_0_0 = (RuleCall)cParentAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNestedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNestedConclusionParserRuleCall_2_0 = (RuleCall)cNestedAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConclusionNested:
		//	parent=ID "(" nested=Conclusion ")";
		@Override public ParserRule getRule() { return rule; }
		
		//parent=ID "(" nested=Conclusion ")"
		public Group getGroup() { return cGroup; }
		
		//parent=ID
		public Assignment getParentAssignment_0() { return cParentAssignment_0; }
		
		//ID
		public RuleCall getParentIDTerminalRuleCall_0_0() { return cParentIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//nested=Conclusion
		public Assignment getNestedAssignment_2() { return cNestedAssignment_2; }
		
		//Conclusion
		public RuleCall getNestedConclusionParserRuleCall_2_0() { return cNestedConclusionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final StartElements pStart;
	private final DecisionElements pDecision;
	private final InputElements pInput;
	private final InputIntElements pInputInt;
	private final InputStringElements pInputString;
	private final InputBoolElements pInputBool;
	private final ParameterElements pParameter;
	private final RulesElements pRules;
	private final RuleTypeElements pRuleType;
	private final OperatorElements pOperator;
	private final ConclusionElements pConclusion;
	private final ConclusionNestedElements pConclusionNested;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DecisionTreeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStart = new StartElements();
		this.pDecision = new DecisionElements();
		this.pInput = new InputElements();
		this.pInputInt = new InputIntElements();
		this.pInputString = new InputStringElements();
		this.pInputBool = new InputBoolElements();
		this.pParameter = new ParameterElements();
		this.pRules = new RulesElements();
		this.pRuleType = new RuleTypeElements();
		this.pOperator = new OperatorElements();
		this.pConclusion = new ConclusionElements();
		this.pConclusionNested = new ConclusionNestedElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sdu.mmmi.tamamo.DecisionTree".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Start:
	//	"Decisions:" decision=Decision
	//	"Input:" input=Input
	//	"Parameters:"
	//	parameter=Parameter
	//	"Rules:"
	//	rules=Rules
	//	"Conclusion:"
	//	conclusion=Conclusion;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//// Decisions: accept, reject, maybe(recommend_accept, recommend_reject, unsure)
	//Decision:
	//	text=ID ("," next=Decision)? | text=ID "(" nested=Decision ")" ("," next=Decision)?;
	public DecisionElements getDecisionAccess() {
		return pDecision;
	}
	
	public ParserRule getDecisionRule() {
		return getDecisionAccess().getRule();
	}
	
	//// Input: int credit, bool loans, bool loyal_customer, bool CE
	//Input:
	//	type=(InputInt | InputString | InputBool) ("," next=Input)?;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//InputInt:
	//	"int" name=ID;
	public InputIntElements getInputIntAccess() {
		return pInputInt;
	}
	
	public ParserRule getInputIntRule() {
		return getInputIntAccess().getRule();
	}
	
	//InputString:
	//	"string" name=ID;
	public InputStringElements getInputStringAccess() {
		return pInputString;
	}
	
	public ParserRule getInputStringRule() {
		return getInputStringAccess().getRule();
	}
	
	//InputBool:
	//	"bool" name=ID;
	public InputBoolElements getInputBoolAccess() {
		return pInputBool;
	}
	
	public ParserRule getInputBoolRule() {
		return getInputBoolAccess().getRule();
	}
	
	///*Parameters:
	// * good = 0
	// * bad = 0
	// */
	//Parameter:
	//	name=ID "=" value=INT
	//	next=Parameter?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	///*Rules:
	// * credit > 1000? good 50
	// * previous loans? reject
	// * loyal customer? good 5
	// * CEO? accept
	// */
	//Rules:
	//	left=RuleType (operator=Operator right=RuleType)? "?" affected_parameter=ID points=INT?
	//	next=Rules?;
	public RulesElements getRulesAccess() {
		return pRules;
	}
	
	public ParserRule getRulesRule() {
		return getRulesAccess().getRule();
	}
	
	//RuleType:
	//	INT | ID;
	public RuleTypeElements getRuleTypeAccess() {
		return pRuleType;
	}
	
	public ParserRule getRuleTypeRule() {
		return getRuleTypeAccess().getRule();
	}
	
	//Operator:
	//	{GreaterThan} '>' | {LessThan} '<' | {GreaterEqual} '>=' | {LessEqual} '<=';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Conclusion:
	//	left=RuleType operator=Operator right=RuleType ":" decision=Decision
	//	next=Conclusion? | ConclusionNested
	//	next=Conclusion? |
	//	"else:" left=ID;
	public ConclusionElements getConclusionAccess() {
		return pConclusion;
	}
	
	public ParserRule getConclusionRule() {
		return getConclusionAccess().getRule();
	}
	
	//ConclusionNested:
	//	parent=ID "(" nested=Conclusion ")";
	public ConclusionNestedElements getConclusionNestedAccess() {
		return pConclusionNested;
	}
	
	public ParserRule getConclusionNestedRule() {
		return getConclusionNestedAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
