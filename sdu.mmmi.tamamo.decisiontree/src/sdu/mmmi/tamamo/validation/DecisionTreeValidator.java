/*
 * generated by Xtext 2.25.0
 */
package sdu.mmmi.tamamo.validation;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;

import sdu.mmmi.tamamo.decisionTree.DecisionTreePackage;
import sdu.mmmi.tamamo.decisionTree.Input;
import sdu.mmmi.tamamo.decisionTree.InputBool;
import sdu.mmmi.tamamo.decisionTree.InputInt;
import sdu.mmmi.tamamo.decisionTree.InputString;
import sdu.mmmi.tamamo.decisionTree.RuleType;
import sdu.mmmi.tamamo.decisionTree.RuleTypeID;
import sdu.mmmi.tamamo.decisionTree.RuleTypeInt;
import sdu.mmmi.tamamo.decisionTree.Rules;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class DecisionTreeValidator extends AbstractDecisionTreeValidator {
	
	@Check
	public void checkNoIntBool(Rules rule) {
		
		if (rule.getLeft() instanceof RuleTypeInt) {
			if (rule.getRight() == null) {
				error("Int cannot be the only parameter.", rule.eContainingFeature(), DecisionTreePackage.CONCLUSION__LEFT);
			}
		}	
	}
	
	
	@Check
	public void checkInputExist(Rules rule, Input input) {
		
		RuleType left = rule.getLeft();
		boolean error = true;
		
		System.err.println("test");
		
		if (left instanceof RuleTypeID ) {
			for (int i = 0; 0 < input.getType().size(); i++) {
				EObject object = input.getType().get(i);
				
				if (object instanceof InputInt) {
					String name = ((InputInt) object).getName();
					if (name.equals(((RuleTypeID) left).getName())) {
						error = false;
					}
				}
				
				if (object instanceof InputString) {
					String name = ((InputString) object).getName();
					if (name.equals(((RuleTypeID) left).getName())) {
						error = false;
					}
				}
				
				if (object instanceof InputBool) {
					String name = ((InputBool) object).getName();
					if (name.equals(((RuleTypeID) left).getName())) {
						error = false;
					}
				}
				
			} if (!error) {
				error("Rule name is not part of the input.", rule.eContainingFeature(), DecisionTreePackage.RULES__LEFT);
			}
		} 
		
		RuleType right = rule.getRight();
		if (right instanceof RuleTypeID) {
			for (int i = 0; 0 < input.getType().size(); i++) {
				EObject object = input.getType().get(i);
				
				if (object instanceof InputInt) {
					String name = ((InputInt) object).getName();
					if (name.equals(((RuleTypeID) right).getName())) {
						error = false;
					}
				}
				
				if (object instanceof InputString) {
					String name = ((InputInt) object).getName();
					if (name.equals(((RuleTypeID) right).getName())) {
						error = false;
					}
				}
				
				if (object instanceof InputBool) {
					String name = ((InputInt) object).getName();
					if (name.equals(((RuleTypeID) right).getName())) {
						error = false;
					}
				}
				
			} if (!error) {
				error("Rule name is not part of the input.", rule.eContainingFeature(), DecisionTreePackage.RULES__RIGHT);
			}
		}
	}
	
	
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					DecisionTreePackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
}
